<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | @zlu]]></title>
  <link href="http://www.zlu.me/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://www.zlu.me/"/>
  <updated>2013-09-16T10:58:49+08:00</updated>
  <id>http://www.zlu.me/</id>
  <author>
    <name><![CDATA[Zhao Lu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[System Calls In Ruby]]></title>
    <link href="http://www.zlu.me/blog/2013/06/03/system-calls-in-ruby/"/>
    <updated>2013-06-03T00:42:00+08:00</updated>
    <id>http://www.zlu.me/blog/2013/06/03/system-calls-in-ruby</id>
    <content type="html"><![CDATA[<p>There are a few ways to execute system commands in Ruby: backticks, system, exec, %x[], and Open3#popen3.
We will take a look at the their differences and briefly discuss security concerns of applying them.</p>

<h2>Backticks (Kernel#`)</h2>

<p>When using backticks, the result is returned as string.  Process status of method execution is stored in $?</p>

<p>{% codeblock lang:ruby %}
1.9.3p429 :006 > <code>ls</code>
 => &ldquo;CHANGELOG.markdown\nGemfile\nGemfile.lock\nREADME.markdown\nRakefile\n_config.yml\nconfig.rb\nconfig.ru\nplugins\npublic\nsass\nsass.old\nsource\nsource.old\n&rdquo;
1.9.3p429 :007 > $?
 => #&lt;Process::Status: pid 35977 exit 0>
1.9.3p429 :008 > s = _
 => #&lt;Process::Status: pid 35977 exit 0>
1.9.3p429 :009 > s.success?
 => true
 {% endcodeblock %}</p>

<h2>%x</h2>

<p>%x() or %x[] is similar to using backticks.</p>

<h2>Kernel#system</h2>

<p>When using system method, the result is true or false depending on whether the command is executed successfully.</p>

<p>{% codeblock lang:ruby %}
1.9.3p429 :002 > system &lsquo;ls&rsquo;
CHANGELOG.markdown README.markdown    config.rb          public             source
Gemfile            Rakefile           config.ru          sass               source.old
Gemfile.lock       _config.yml        plugins            sass.old
 => true
1.9.3p429 :003 > system &lsquo;ls a&rsquo;
ls: a: No such file or directory
 => false
{% endcodeblock %}</p>

<h2>Kernel#exec</h2>

<p>exec replaces the current process by running the given external command.  If you invoke exec in irb, then the irb process
will be replaced by the running external command.  You will get the shell prompt back after exec finishes.  If you invoke
exec in a ruby program, that program will stop execution (just like the irb process).</p>

<p>{% codeblock lang:ruby %}
zlu@zlu-mba:~/projects/me/blog-zlu (master <em>)$ irb
1.9.3p429 :001 > exec &lsquo;ls&rsquo;
CHANGELOG.markdown README.markdown    config.rb          public             source
Gemfile            Rakefile           config.ru          sass               source.old
Gemfile.lock       _config.yml        plugins            sass.old
zlu@zlu-mba:~/projects/me/blog-zlu (master </em>)$
{% endcodeblock %}</p>

<h2>Open3#popen3</h2>

<p>popen3 executes the command while opening stdin, stdout, and stderr and a thread to wait for the command execution.</p>

<p>{% codeblock stdout with successfully execution lang:ruby %}
1.9.3p429 :010 > require &lsquo;open3&rsquo;
 => true
1.9.3p429 :011 > Open3.popen3 &lsquo;ls&rsquo;
 => [#&lt;IO:fd 6>, #&lt;IO:fd 7>, #&lt;IO:fd 9>, #&lt;Thread:0x007fcd928ece18 run>]
1.9.3p429 :012 > i, o, e, t = _
 => [#&lt;IO:fd 6>, #&lt;IO:fd 7>, #&lt;IO:fd 9>, #&lt;Thread:0x007fcd928ece18 dead>]
1.9.3p429 :014 > o.read
 => &ldquo;CHANGELOG.markdown\nGemfile\nGemfile.lock\nREADME.markdown\nRakefile\n_config.yml\nconfig.rb\nconfig.ru\nplugins\npublic\nsass\nsass.old\nsource\nsource.old\n&rdquo;
{% endcodeblock %}</p>

<p>{% codeblock stderr with unsuccessfully execution lang:ruby %}
1.9.3p429 :027 > Open3.popen3(&lsquo;ls a&rsquo;) do |i, o, e, t|
1.9.3p429 :029?>   p e.read
1.9.3p429 :030?>   end
&ldquo;ls: a: No such file or directory\n&rdquo;
 => &ldquo;ls: a: No such file or directory\n&rdquo;
{% endcodeblock %}</p>

<p>There are a few variations of popen3 methods such as popen2 where a couple of streams are merged 2&amp;>1, for example.</p>

<h2>Security Concerns</h2>

<p>Much like SQL Injection, similar things can happen when using these method calls.
Consider a command like <code>ls a;rm a</code>.  or even worse <code>ls a;rm -rf *</code>
We can address such concerns with another form of popen3(cmd, args).  For the command above, it is
<code>popen3('ls', 'a;rm -rf*')</code>.  The last part of the command is interpreted as the options for <code>ls</code>.</p>

<p>Take a look at this playful little app <a href="https://github.com/zlu/web_shell">web_shell</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Initialization Is An Interesting Thing]]></title>
    <link href="http://www.zlu.me/blog/2013/05/29/initialization-is-an-interesting-thing/"/>
    <updated>2013-05-29T22:51:00+08:00</updated>
    <id>http://www.zlu.me/blog/2013/05/29/initialization-is-an-interesting-thing</id>
    <content type="html"><![CDATA[<p>Have you ever tried to define <code>initialized</code> method for an <code>ActiveRecord</code>?</p>

<p>Try it if you haven&rsquo;t.</p>

<p>```
class MyRecord &lt; ActiveRecord::Base
  def initialize
  end
end</p>

<p>MyRecord.new  #<MyRecord not initialized></p>

<p>```</p>

<p>This is probably not what you have expected.  Why is MyRecord not initialized?</p>

<p>Well, ActiveRecord::Base has already defined <code>initialize</code> method.  It is used to instantiate Rails models.</p>

<p><code>
def initialize(attributes = nil, options = {})
</code></p>

<p>If you really want to override it with your own version, you would want to do this:</p>

<p>```
class MyRecord &lt; ActiveRecord::Base
  def initialize(attributes = nil, options = {})</p>

<pre><code>super
# now do your own initialization
</code></pre>

<p>  end
end</p>

<p>MyRecord.new
```
This should build a new AR for you (if you have a defined my_records table in database).</p>

<p>Rails provides a cleaner way to handle this via after_initilize callback.</p>

<p>```
class MyClass &lt; ActiveRecord::Base
  after_initialize do</p>

<pre><code># do your thing here
puts 'more to do after initialization'
</code></pre>

<p>  end
end
```</p>

<p><code>after_initialize</code> is called when ActiveRecord is instantiated and before it is saved.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Housekeeping RVM]]></title>
    <link href="http://www.zlu.me/blog/2012/11/10/housekeeping-rvm/"/>
    <updated>2012-11-10T18:13:00+08:00</updated>
    <id>http://www.zlu.me/blog/2012/11/10/housekeeping-rvm</id>
    <content type="html"><![CDATA[<p>When a new version of Ruby comes out, I like to use RVM to install it, migrate ruby gems to new ruby, and remove the
older version of ruby.  This prevent the disk bloated with different versions of Rubies and duplicate gem(sets).</p>

<p>First, always update the RVM because it&rsquo;ll also update known list of Ruby.</p>

<p><code>bash
rvm get stable
</code></p>

<p>Then list known versions of Rubies</p>

<p>``` bash
rvm list known</p>

<p>&hellip;
[ruby-]1.9.3-p286
[ruby-]1.9.3-[p327]
[ruby-]1.9.3-head
[ruby-]2.0.0-preview1
&hellip;
```</p>

<p>The output shows abridged result since the full list is long.  I currently have p286 installed and I&rsquo;m about to install p327
because it contains a security fix for DoS attack in p286.</p>

<p><code>bash
rvm install 1.9.3
</code></p>

<p>Since p327 is the default stable version (as indicated by []), the command above is sufficient.</p>

<p>Now you can migrate the gem(sets)</p>

<p><code>bash
rvm migrate 1.9.3-p286 1.9.3-p327
</code></p>

<p>As part of the migration, you could opt to remove old ruby version.  Then check the disk usage:</p>

<p><code>bash
rvm disk-usage all
</code></p>

<h2>Note</h2>

<p><a href="https://github.com/wayneeseguin/rvm">RVM</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Segmentation fault with Rails and JSON]]></title>
    <link href="http://www.zlu.me/blog/2012/10/16/segmentation-fault-with-rails-and-json/"/>
    <updated>2012-10-16T21:03:00+08:00</updated>
    <id>http://www.zlu.me/blog/2012/10/16/segmentation-fault-with-rails-and-json</id>
    <content type="html"><![CDATA[<p>After manually cleaning Ruby gems on my system, I got this error running <code>rails c</code> or <code>rails s</code></p>

<p>{% codeblock lang:bash %}</p>

<p>zlu@zlu-mba:~/projects/foo (master *)$ rails c
/Users/zlu/.rvm/gems/ruby-1.9.3-p0/gems/json-1.7.5/lib/json/ext/parser.bundle: [BUG] Segmentation fault
ruby 1.8.7 (2012-02-08 patchlevel 358) [universal-darwin12.0]</p>

<p>Abort trap: 6</p>

<p>{% endcodeblock %}</p>

<p>It is very weird if you think about it.  The <code>ruby -v</code> shows that the system is using ruby version 1.9.3 managed by rvm.
But the error shows ruby 1.8.7!  It must be something I did with uninstalling versions of gems where executable requirements got messed up.</p>

<p>Instead of imploding rvm, here&rsquo;s what I did to correct the problem.</p>

<p>{% codeblock lang:bash %}</p>

<p>gem list | cut -d" &ldquo; -f1 | xargs gem uninstall -aIx
gem install bundler
bundle install</p>

<p>{% endcodeblock %}</p>

<p>The first command uninstalls all the gems, including bundler.
After reinstalling bundler, you can run <code>bundle install</code>, assuming you are in a project directory where Gemfile.lock exists.</p>
]]></content>
  </entry>
  
</feed>
