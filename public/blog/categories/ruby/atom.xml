<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | @zlu]]></title>
  <link href="http://www.zlu.me/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://www.zlu.me/"/>
  <updated>2013-09-17T09:29:25+08:00</updated>
  <id>http://www.zlu.me/</id>
  <author>
    <name><![CDATA[Zhao Lu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[What Happened to FD 3 and 4 in MRI]]></title>
    <link href="http://www.zlu.me/blog/2012/11/08/what-happened-to-fd-3-and-4-in-mri/"/>
    <updated>2012-11-08T16:07:00+08:00</updated>
    <id>http://www.zlu.me/blog/2012/11/08/what-happened-to-fd-3-and-4-in-mri</id>
    <content type="html"><![CDATA[<p>I got curious when this happened:</p>

<p><code>ruby
1.9.3p286 :032 &gt; File.open('/etc/passwd').fileno
 =&gt; 5
</code></p>

<p>I know that file descriptors (FD) 0, 1, and 2 are assigned to STDIN, STDOUT, and STDERR.  I also know that FDs are assigned
in order.  So what happened to 3 and 4?</p>

<p>``` ruby
1.9.3p286 :015 > STDIN.fileno
 => 0</p>

<p>1.9.3p286 :034 > IO.for_fd(3)
ArgumentError: The given fd is not accessible because RubyVM reserves it</p>

<pre><code>from (irb):34:in `for_fd'
from (irb):34
from /Users/zlu/.rvm/rubies/ruby-1.9.3-p286/bin/irb:16:in `&lt;main&gt;'
</code></pre>

<p>```</p>

<p>Evidently some ruby process is using it, but what process?</p>

<p>``` bash
zlu@zlu-mba:~$ lsof -d 3,4 | grep ruby
ruby      4980  zlu    3     PIPE 0xffffff8029fa7860     16384           &ndash;>0xffffff8029fa4370
ruby      4980  zlu    4     PIPE 0xffffff8029fa4370     16384           &ndash;>0xffffff8029fa7860</p>

<p>COMMAND    PID  USER   FD    TYPE DEVICE                  SIZE/OFF   NODE NAME
```</p>

<p>And</p>

<p><code>bash
zlu@zlu-mba:~$ ps -p 4980
  PID TTY           TIME CMD
 4980 ttys003    0:00.47 irb
</code></p>

<p>So Ruby&rsquo;s RVM is using <em>pipes</em> with FD 3 and 4.  As far as what these pipes are used for, that&rsquo;ll be another discussion.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Uninstall Multiple Versions of Multiple Ruby Gems]]></title>
    <link href="http://www.zlu.me/blog/2012/07/31/uninstall-multiple-versions-of-multiple-ruby-gem/"/>
    <updated>2012-07-31T10:13:00+08:00</updated>
    <id>http://www.zlu.me/blog/2012/07/31/uninstall-multiple-versions-of-multiple-ruby-gem</id>
    <content type="html"><![CDATA[<p>Let&rsquo;s say you have multiple versions of spree gems installed and want to get rid of the older versions.</p>

<p>{% codeblock lang:bash %}
zlu@zlu-mba: gem list spree
spree (1.1.3, 1.0.0, 1.0.0.rc2)
spree_api (1.1.3, 1.0.0, 1.0.0.rc2)
spree_auth (1.1.3, 1.0.0, 1.0.0.rc2)
spree_cmd (1.1.3, 1.0.0, 1.0.0.rc2)
spree_core (1.1.3, 1.0.0, 1.0.0.rc2)
spree_dash (1.1.3, 1.0.0, 1.0.0.rc2)
spree_promo (1.1.3, 1.0.0, 1.0.0.rc2)
spree_sample (1.1.3, 1.0.0, 1.0.0.rc2)
{% endcodeblock %}</p>

<p>Instead of doing this a bunch of times (for different gems and versions):</p>

<p>{% codeblock lang:bash %}
gem uninstall spree -v 1.0.0
{% endcodeblock %}</p>

<p>Do this:</p>

<p>{% codeblock lang:bash %}
gem uninstall spree{,<em>api,</em>auth,<em>cmd,</em>core,<em>dash,</em>promo,_sample} -v {1.0.0, 1.0.0.rc2}
{% endcodeblock %}</p>

<p>This is a feature of bash shell &ndash; <a href="http://www.gnu.org/software/bash/manual/html_node/Brace-Expansion.html#Brace-Expansion">brace expansion</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install Native Ruby Gem in Mountain Lion Preview]]></title>
    <link href="http://www.zlu.me/blog/2012/02/21/install-native-ruby-gem-in-mountain-lion-preview/"/>
    <updated>2012-02-21T13:59:00+08:00</updated>
    <id>http://www.zlu.me/blog/2012/02/21/install-native-ruby-gem-in-mountain-lion-preview</id>
    <content type="html"><![CDATA[<p>In Preview of OS X Mountain Lion, XCode has been distributed as a .app package verses the traditional installer.
Also the Commandline Tools are not installed by default.  Commandline Tools contains cc/gcc that you will need.</p>

<p>After download the preview of XCode 4.4, drop it to the Application directory.</p>

<p>Open XCode and cmd + , to open Preferences panel where you can install Commandline Tools:</p>

<p>{% img <a href="https://img.skitch.com/20120221-r2cidbjd92nh9tmswq19hj6rdc.jpg">https://img.skitch.com/20120221-r2cidbjd92nh9tmswq19hj6rdc.jpg</a> %}</p>

<p>Now in shell you should be able to <code>locate cc</code> and <code>locate gcc</code></p>

<p>Now if you try to <code>gem install hpricot</code> or any gem that requires native extension &copy;, you may encounter problems
looks like this:</p>

<pre>

checking for main() in -lc... *** extconf.rb failed ***
Could not create Makefile due to some reason, probably lack of
necessary libraries and/or headers.  Check the mkmf.log file for more
details.  You may need configuration options.

Provided configuration options:
        --with-opt-dir
        --without-opt-dir
        --with-opt-include
        --without-opt-include=${opt-dir}/include
        --with-opt-lib
        --without-opt-lib=${opt-dir}/lib
        --with-make-prog
        --without-make-prog
        --srcdir=.
        --curdir
        --ruby=C:/ruby/bin/ruby
        --with-hpricot_scan-dir
        --without-hpricot_scan-dir
        --with-hpricot_scan-include
        --without-hpricot_scan-include=${hpricot_scan-dir}/include
        --with-hpricot_scan-lib
        --without-hpricot_scan-lib=${hpricot_scan-dir}/lib
        --with-clib
        --without-clib

</pre>


<p>If you cat the mkmf.log, you may see something like this:</p>

<p>&ldquo;gcc-4.2 -o conftest &hellip;.&rdquo;</p>

<p>So the fix is not to add configuration options but to simply create sym link of gcc-4.2:
{% codeblock shell %}
ln -s /usr/bin/gcc /usr/bin/gcc-4.2
{% endcodeblock %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Couple Things to Watch Out For Using PrivatePub]]></title>
    <link href="http://www.zlu.me/blog/2012/02/12/a-couple-things-to-watch-out-for-using-privatepub/"/>
    <updated>2012-02-12T20:38:00+08:00</updated>
    <id>http://www.zlu.me/blog/2012/02/12/a-couple-things-to-watch-out-for-using-privatepub</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/ryanb/private_pub">Private Pub</a> is a convinent gem wraps around <a href="http://faye.jcoglan.com/ruby.html">Faye</a>.</p>

<p>There are a few things to consider when using PrivatePub.</p>

<ol>
<li><p>It does <strong>not</strong> support ssl.
However, there is a <a href="https://github.com/ryanb/private_pub/pull/33">pull request</a> for it.</p></li>
<li><p>You almost always want to add some sort of filtering on the server or client side, or maybe both.
For example, if you don&rsquo;t want your chat message to be received by everyone logged in, you will need to
publish to a channel uniquely identified by each session of the chat.</p></li>
</ol>


<p><strong>UPDATE</strong> @rbates has merged this pull request.  I was able to verify ssl support indeed works!</p>
]]></content>
  </entry>
  
</feed>
