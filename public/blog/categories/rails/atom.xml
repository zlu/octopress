<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: rails | @zlu]]></title>
  <link href="http://www.zlu.me/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://www.zlu.me/"/>
  <updated>2012-11-01T21:30:12-07:00</updated>
  <id>http://www.zlu.me/</id>
  <author>
    <name><![CDATA[Zhao Lu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Install and Create Rails 4.0 App]]></title>
    <link href="http://www.zlu.me/blog/2012/10/29/install-and-create-rails-4-dot-0-app/"/>
    <updated>2012-10-29T22:46:00-07:00</updated>
    <id>http://www.zlu.me/blog/2012/10/29/install-and-create-rails-4-dot-0-app</id>
    <content type="html"><![CDATA[<p>Rails 4.0 development has started a while back.  It was merged into Rails' master branch on Github in 2011.
As the writing of this blog entry, the stable version of Rails is 3.2.8.  Release candidate is at 3.2.9.rc1.
Because 4.0 is not yet official available, you have to jump through hoops to get a Rails 4 application up and running.</p>

<h2>Install Rails 4.0 gem</h2>

<p>Create this Gemfile:</p>

<p>```
source 'http://rubygems.org'</p>

<p>gem 'rails', :git => 'git://github.com/rails/rails.git'
gem 'uglifier', '>= 1.0.30'
gem 'activerecord-deprecated_finders', :git => 'git://github.com/rails/activerecord-deprecated_finders.git'
gem 'journey', :git => 'git://github.com/rails/journey.git'
```</p>

<ul>
<li>This Gemfile specifies the master branch of Rails, which contains 4.0 beta.</li>
<li>Gem activerecord-deprecated_finders is a dependency.</li>
<li>Gem journey, the Rails router, is also required.</li>
</ul>


<p>In the same directory of the Gemfile, issue <code>bundle install</code>.  This should install Rails 4.0.0.beta.
But running <code>gem list rails</code> won't show 4.0 being installed.  So do this instead:</p>

<p><code>
zlu@zlu-mba:~/projects/test$ bundle show rails
/Users/zlu/.rvm/gems/ruby-1.9.3-p0/bundler/gems/rails-4e23c0ef341c
</code></p>

<p>The Rails executable is at:
<code>
`bundle show rails`/railties/bin/rails
</code></p>

<p><code>
`bundle show rails`/railties/bin/rails -v should show: Rails 4.0.0.beta
</code></p>

<p>Now you can use this version of rails to generate an app named foo.</p>

<h2>Create Rails 4.0 app</h2>

<p><code>
`bundle show rails`/railties/bin/rails new foo
</code>
This command  creates a typical rails app called foo and output an error about not being able to find Rails 4 gem, which
should not be a surprise.</p>

<p>You will edit foo/Gemfile to make <code>bundle install</code> work.</p>

<p>Add the two gems Rails depends on:</p>

<p><code>
gem 'journey', github: 'rails/journey'
gem 'activerecord-deprecated_finders', github: 'rails/activerecord-deprecated_finders'
</code></p>

<p>Change the source definition for the following gems:</p>

<p>```
gem 'rails', '4.0.0.beta'
gem 'sass-rails',   '~> 4.0.0.beta'
gem 'coffee-rails', '~> 4.0.0.beta'</p>

<p>```</p>

<p>To</p>

<p><code>
gem 'rails', github: 'rails/rails'
gem 'sass-rails', github: 'rails/sass-rails'
gem 'coffee-rails', github: 'rails/coffee-rails'
</code></p>

<p>Now you should be <code>bundle install</code>, sit back and enjoy your new Rails 4.0 app.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Testing Carrierwave with Fog for Amazon S3]]></title>
    <link href="http://www.zlu.me/blog/2012/07/17/testing-carrierwave-with-fog/"/>
    <updated>2012-07-17T21:10:00-07:00</updated>
    <id>http://www.zlu.me/blog/2012/07/17/testing-carrierwave-with-fog</id>
    <content type="html"><![CDATA[<p>Testing file upload using CarrierWave with Fog with S3 turns out to be difficult.</p>

<ul>
<li>CarrierWave/Fog need a non-empty file, otherwise the url to the S3 object will be nil and can't be tested.</li>
<li>Fog.mock! doesn't work out of box.  Some extra steps are needed to avoid uploading files to S3 when running tests.</li>
</ul>


<p>First, create config/fog_credentials.yml</p>

<p>{% codeblock lang:yml %}
default:
  aws_access_key_id: 'your-aws-access-key-id'
  aws_secret_access_key: 'your-aws-secret-access-key/'
  region: 'your-aws-region'
{% endcodeblock %}</p>

<p>Next, put this to your config/initializers/carrier_wave.rb</p>

<p>{% codeblock lang:ruby %}
Fog.credentials_path = Rails.root.join('config/fog_credentials.yml')</p>

<p>fog_dir = Rails.env == 'production' ? 'production-bucket' : 'dev-bucket'</p>

<p>CarrierWave.configure do |config|
  config.fog_credentials = {:provider => 'AWS'}
  config.fog_directory  = fog_dir
end
{% endcodeblock %}</p>

<p>Next, put this into spec/support/fog_helper.rb</p>

<p>{% codeblock lang:ruby %}
Fog.mock!
Fog.credentials_path = Rails.root.join('config/fog_credentials.yml')
connection = Fog::Storage.new(:provider => 'AWS')
connection.directories.create(:key => 'dev-bucket')
{% endcodeblock %}</p>

<p>Note, the :key value <em>must</em> match whats defined for fog_dir (dev-bucket) in carrier_wave.rb</p>

<p>Suppose you want to test this class:</p>

<p>{% codeblock lang:ruby %}
class FileUploader &lt; CarrierWave::Uploader::Base
  storage :fog
end
{% endcodeblock %}</p>

<p>Your rspec test can be something like this:</p>

<p>{% codeblock lang:ruby %}
class TestFileUploader
  mount_uploader :file, FileUploader
end</p>

<p>describe FileUploader do
  include FakeFS::SpecHelpers</p>

<p>  context 'for non-production environment' do</p>

<pre><code>it 'should upload video clip to dev-bucket on s3' do
  FakeFS.activate!
  FakeFS::File.should_receive(:chmod) #this is needed or you will get an exception
  File.open('test_file', 'w') do |f|
    f.puts('foo') # this is required or uploader_test.file.url will be nil
  end
  uploader_test = TestFileUploader.new
  uploader_test.file = File.open('test_file')
  uploader_test.save!
  uploader_test.file.url.should match /.*\/dev-bucket.*/ #test to make sure that it is not production-bucket
  FakeFS.deactivate!
end
</code></pre>

<p>  end
end
{% endcodeblock %}</p>

<p>Now the test is complete.  It uses fakefs to generate a fake file which is non-empty.  Fog will pretent to upload the file
using the FileUploader under test.  The upload url is the subject under test.</p>
]]></content>
  </entry>
  
</feed>
