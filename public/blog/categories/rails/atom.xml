<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Rails | @zlu]]></title>
  <link href="http://www.zlu.me/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://www.zlu.me/"/>
  <updated>2013-09-14T18:08:44+08:00</updated>
  <id>http://www.zlu.me/</id>
  <author>
    <name><![CDATA[Zhao Lu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Initialization Is An Interesting Thing]]></title>
    <link href="http://www.zlu.me/blog/2013/05/29/initialization-is-an-interesting-thing/"/>
    <updated>2013-05-29T22:51:00+08:00</updated>
    <id>http://www.zlu.me/blog/2013/05/29/initialization-is-an-interesting-thing</id>
    <content type="html"><![CDATA[<p>Have you ever tried to define <code>initialized</code> method for an <code>ActiveRecord</code>?</p>

<p>Try it if you haven&rsquo;t.</p>

<p>```
class MyRecord &lt; ActiveRecord::Base
  def initialize
  end
end</p>

<p>MyRecord.new  #<MyRecord not initialized></p>

<p>```</p>

<p>This is probably not what you have expected.  Why is MyRecord not initialized?</p>

<p>Well, ActiveRecord::Base has already defined <code>initialize</code> method.  It is used to instantiate Rails models.</p>

<p><code>
def initialize(attributes = nil, options = {})
</code></p>

<p>If you really want to override it with your own version, you would want to do this:</p>

<p>```
class MyRecord &lt; ActiveRecord::Base
  def initialize(attributes = nil, options = {})</p>

<pre><code>super
# now do your own initialization
</code></pre>

<p>  end
end</p>

<p>MyRecord.new
```
This should build a new AR for you (if you have a defined my_records table in database).</p>

<p>Rails provides a cleaner way to handle this via after_initilize callback.</p>

<p>```
class MyClass &lt; ActiveRecord::Base
  after_initialize do</p>

<pre><code># do your thing here
puts 'more to do after initialization'
</code></pre>

<p>  end
end
```</p>

<p><code>after_initialize</code> is called when ActiveRecord is instantiated and before it is saved.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Segmentation fault with Rails and JSON]]></title>
    <link href="http://www.zlu.me/blog/2012/10/16/segmentation-fault-with-rails-and-json/"/>
    <updated>2012-10-16T21:03:00+08:00</updated>
    <id>http://www.zlu.me/blog/2012/10/16/segmentation-fault-with-rails-and-json</id>
    <content type="html"><![CDATA[<p>After manually cleaning Ruby gems on my system, I got this error running <code>rails c</code> or <code>rails s</code></p>

<p>{% codeblock lang:bash %}</p>

<p>zlu@zlu-mba:~/projects/foo (master *)$ rails c
/Users/zlu/.rvm/gems/ruby-1.9.3-p0/gems/json-1.7.5/lib/json/ext/parser.bundle: [BUG] Segmentation fault
ruby 1.8.7 (2012-02-08 patchlevel 358) [universal-darwin12.0]</p>

<p>Abort trap: 6</p>

<p>{% endcodeblock %}</p>

<p>It is very weird if you think about it.  The <code>ruby -v</code> shows that the system is using ruby version 1.9.3 managed by rvm.
But the error shows ruby 1.8.7!  It must be something I did with uninstalling versions of gems where executable requirements got messed up.</p>

<p>Instead of imploding rvm, here&rsquo;s what I did to correct the problem.</p>

<p>{% codeblock lang:bash %}</p>

<p>gem list | cut -d" &ldquo; -f1 | xargs gem uninstall -aIx
gem install bundler
bundle install</p>

<p>{% endcodeblock %}</p>

<p>The first command uninstalls all the gems, including bundler.
After reinstalling bundler, you can run <code>bundle install</code>, assuming you are in a project directory where Gemfile.lock exists.</p>
]]></content>
  </entry>
  
</feed>
