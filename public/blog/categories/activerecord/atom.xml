<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ActiveRecord | 吕钊]]></title>
  <link href="http://www.zlu.me/blog/categories/activerecord/atom.xml" rel="self"/>
  <link href="http://www.zlu.me/"/>
  <updated>2013-09-28T08:23:59+08:00</updated>
  <id>http://www.zlu.me/</id>
  <author>
    <name><![CDATA[Zhao Lu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[A Small Difference Between Mongoid and ActiveRecord Query Interface]]></title>
    <link href="http://www.zlu.me/blog/2012/10/16/a-small-difference-between-mongoid-and-activerecord-query-interface/"/>
    <updated>2012-10-16T21:29:00+08:00</updated>
    <id>http://www.zlu.me/blog/2012/10/16/a-small-difference-between-mongoid-and-activerecord-query-interface</id>
    <content type="html"><![CDATA[<p>There are definitely some gotchas when switching from ActiveRecord to MongoDB (with Mongoid for example).  One of them
is how the IN operator in SQL is supported.</p>

<p>In ActiveRecord&rsquo;s Query Interface, we can do <code>MyModel.where(:id =&gt; [1,3,5])</code> and expect this SQL query to be generated:
<code>select * from MyModel where (MyModel.id IN (1,3,5))</code>.  Not true when it comes to Mongoid.</p>

<p>Mongo supports quite a few conditional operators such as &lt; (or $lt), $all, $in, etc.  So the above query needs to be constructed
as such:</p>

<p><code>MyModel.where(:id =&gt; {:$in =&gt; [1,3,5]})</code></p>

<p>Another example:</p>

<p><code>MyModel.where(:created_at =&gt; {:$gt =&gt; 2.days.ago})</code></p>

<p>This builds a query that returns instances of MyModel that were created in the past 2 days.</p>

<h1>TODO ActiveRecord#from &ndash; does not exist in Mongoid</h1>
]]></content>
  </entry>
  
</feed>
