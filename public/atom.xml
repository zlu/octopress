<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[My Open Voice]]></title>
  <link href="http://www.zlu.com/atom.xml" rel="self"/>
  <link href="http://www.zlu.com/"/>
  <updated>2012-01-30T22:23:40-08:00</updated>
  <id>http://www.zlu.com/</id>
  <author>
    <name><![CDATA[Zhao Lu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[On Agile]]></title>
    <link href="http://www.zlu.com/blog/2012/01/30/on-agile/"/>
    <updated>2012-01-30T18:11:00-08:00</updated>
    <id>http://www.zlu.com/blog/2012/01/30/on-agile</id>
    <content type="html"><![CDATA[<p>Programmers do not like rules.</p>

<p>Programmers who are hesitate about adopting agile say agile is about adding rules
to their development.</p>

<p>Agile is not about implementing new rules.  It is about breaking existing rules.<br/>
The first rule to break when introducing XP into a traditional work place is to take down
the cubicles.</p>

<p>Agile is about communication.  Pair programming is all about communication.  The pair
communicate via code.  One write test, sees it fail, and the other write enough code
to make the test pass.  The pair constantly communicate verbally to making design decisions.</p>

<p>Agile is about communication across functional areas.  Customers, production, development, and
QA all need to communicate.  That is why heterogeneous pairing is so important.  Has
QA accepted the done criteria before developers start working on it?  How many times
do you have stories rejected and then started to talk to QA about what this feature
is about?  Miscommunication and missed communication imply wasted development and test cycles.</p>

<p>The hardest thing for most developers to get about XP is TDD/BDD.  If there is
one thing you want to start with Agile, that has to be TDD.  TDD is not about writing
some code then a couple of tests to cover what you think is sufficient.  It is about
starting a feature by writing a single test and only enough code to make it pass.  A
method with a hard-coded string sometime is enough to make the test pass and that is ok.<br/>
Another example is simply returning a 200 for a web request.  The next test will be
forcing the hard-coded string to change or returning an actual response body (or at
least part of it).  It is harder to think about test first, it is also more code to
write because you may have several tests for a single line of production code.  But
the result is more robust and reliable code.  You will save time in the end because
you have considered how to defeat and defend your own code from the beginning, and
you will want to naturally refactor towards the end goal.  You will be less focused
on the postive case, which is usually easy and spend more time on negative paths.</p>

<p>Agile builds better programmers.  You may think TDD is a rule.  But it&#8217;s really a habit.<br/>
It is like Zen, a practice of life.  When thinking about a feature, you think about
how to make it testable.  If you can&#8217;t seem to figure out how to write test first, it
means you are not understanding the feature well or the story needs redesign or being
brutely honest, not getting TDD.  TDD takes practice, much like learning a new programming
language.  I remember learning Java when I already know C.  OO concepts seem to be foreign
and hard to grasp, at first.</p>

<p>Agile does not stop you from experimenting with new technology and building prototypes just
to figure out whether something will work or not.  It is called spikes.  You can spike
often as needed but remember developer time is valuable and obligation to deliver
features to customers on time.  Using existing infrastructure to meet customer requirements
and refactor towards end goal is ideal.</p>

<p>Agile is about emotions.  Believe or not, coders are also emotional beings.  Agile
considers emotions first then about machines and programming languages.  In order to
better delivery business values, the team, as an aggregation of humans, needs to work
towards the same goal.  By effective communication and interaction, people make better
decisions.  Pair programming eliminates personal blames.  Shifting pairs changes
code ownership from individual to team.  By building trust, pair forms a natural support
system.  It is often comforting to have someone sitting next to you to point out logical
flaws.  Afterall, coders want to deliver better code.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git auto complete]]></title>
    <link href="http://www.zlu.com/blog/2011/11/01/git-auto-complete/"/>
    <updated>2011-11-01T22:04:00-07:00</updated>
    <id>http://www.zlu.com/blog/2011/11/01/git-auto-complete</id>
    <content type="html"><![CDATA[<p>Git auto complete is a convenient feature.</p>

<p>This feature is based on git-completion file comes with git.</p>

<p>On OS X, if you install git via homebrew, you can find git source directory using:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>locate git | grep Cellar
</span></code></pre></td></tr></table></div></figure>


<p>Locate the git-completion file.</p>

<p>In my case, it is `/usr/local/Cellar/git/1.7.5/etc/bash_completion.d/git-completion.bash</p>

<p>Open this file and you will find this explanation:</p>

<p>The contained completion routines provide support for completing:</p>

<ul>
<li>local and remote branch names</li>
<li>local and remote tag names</li>
<li>.git/remotes file names</li>
<li>git &#8216;subcommands&#8217;</li>
<li>tree paths within &#8216;ref:path/to/file&#8217; expressions</li>
<li>common &#8211;long-options</li>
</ul>


<p>And the steps to enable this</p>

<ul>
<li>Copy this file to somewhere (e.g. ~/.git-completion.sh).</li>
<li>Add the following line <code>source ~/.git-completion.sh</code> to your .bashrc</li>
<li>Changing PS1 to show current branch <code>PS1='[\u@\h \W$(__git_ps1 " (%s)")]\$ '</code></li>
</ul>


<p>If you want some color in git prompt</p>

<p><code>PS1='\[\033[32m\]\u@\h\[\033[00m\]:\[\033[34m\]\w\[\033[31m\]$(__git_ps1)\[\033[00m\]\$ '</code></p>

<p>If you want the prompt to show git-ps1 state
<code>GIT_PS1_SHOWDIRTYSTATE=true</code></p>

<p><code>Generating Site with Jekyllbe rake generate</code></p>

<p>Example:</p>

<p><code>zlu@zlu-mba:~/projects/me/octopress (master *)</code></p>
]]></content>
  </entry>
  
</feed>
